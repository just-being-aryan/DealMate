import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/components/ui/use-toast";
import {
  FileText,
  Upload,
  Brain,
  AlertTriangle,
  CheckCircle,
  Download,
  TrendingUp,
  TrendingDown,
  Eye,
} from "lucide-react";

interface AnalysisResult {
  fileName: string;
  riskScore: number;
  sentiment: "positive" | "negative" | "neutral";
  keyFindings: string[];
  recommendations: string[];
  financialMetrics?: {
    revenue: number;
    growth: number;
    profitability: number;
  };
}

export const AIDocumentAnalyzer = () => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [analysisResults, setAnalysisResults] = useState<AnalysisResult[]>([]);
  const { toast } = useToast();

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    setIsAnalyzing(true);
    setProgress(0);

    const totalFiles = files.length;
    const results: AnalysisResult[] = [];

    for (let i = 0; i < totalFiles; i++) {
      const file = files[i];
      await new Promise((resolve) => setTimeout(resolve, 2000)); // simulate

      const mockResult: AnalysisResult = {
        fileName: file.name,
        riskScore: Math.floor(Math.random() * 100),
        sentiment: ["positive", "negative", "neutral"][
          Math.floor(Math.random() * 3)
        ] as any,
        keyFindings: [
          "Strong revenue growth of 45% YoY",
          "Diversified customer base with no single customer >15%",
          "Recurring revenue model with 89% retention rate",
          "Clean financial records with GAAP compliance",
        ],
        recommendations: [
          "Verify customer contracts for revenue recognition",
          "Review working capital trends",
          "Assess scalability of current operations",
        ],
        financialMetrics: {
          revenue: 2500000,
          growth: 45,
          profitability: 18,
        },
      };

      results.push(mockResult);
      setProgress(((i + 1) / totalFiles) * 100);
    }

    setAnalysisResults(results);
    setIsAnalyzing(false);

    toast({
      title: "Analysis Complete",
      description: `Successfully analyzed ${totalFiles} document(s)`,
    });
  };

  const getRiskColor = (score: number) => {
    if (score <= 30) return "text-success";
    if (score <= 70) return "text-warning";
    return "text-destructive";
  };

  const getSentimentIcon = (sentiment: string) => {
    switch (sentiment) {
      case "positive":
        return <TrendingUp className="h-4 w-4 text-success" />;
      case "negative":
        return <TrendingDown className="h-4 w-4 text-destructive" />;
      default:
        return <div className="h-4 w-4 bg-muted rounded-full" />;
    }
  };

  const generateReport = (result: AnalysisResult) => `
DOCUMENT ANALYSIS REPORT
========================

File: ${result.fileName}
Generated: ${new Date().toLocaleDateString()}

RISK ASSESSMENT
--------------
Risk Score: ${result.riskScore}%
Sentiment: ${
    result.sentiment.charAt(0).toUpperCase() + result.sentiment.slice(1)
  }

${
  result.financialMetrics
    ? `FINANCIAL METRICS
-----------------
Revenue: $${(result.financialMetrics.revenue / 1000000).toFixed(1)}M
Growth Rate: +${result.financialMetrics.growth}%
Profit Margin: ${result.financialMetrics.profitability}%

`
    : ""
}KEY FINDINGS
------------
${result.keyFindings.map((finding, i) => `${i + 1}. ${finding}`).join("\n")}

RECOMMENDATIONS
--------------
${result.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join("\n")}

---
Report generated by DealMate AI Document Analyzer
`.trim();

  const handleExportReport = (result: AnalysisResult) => {
    const reportContent = generateReport(result);
    const blob = new Blob([reportContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);

    // Create anchor & trigger download
    const a = document.createElement("a");
    a.href = url;
    a.download = `analysis-report-${result.fileName.replace(
      /\.[^/.]+$/,
      ""
    )}-${new Date().toISOString().split("T")[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);

    toast({
      title: "Report Exported",
      description: `Analysis report for ${result.fileName} has been downloaded`,
    });
  };

  return (
    <div className="space-y-6">
      {/* Upload Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5 text-primary" />
            AI Document Analyzer
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="border-2 border-dashed border-border rounded-lg p-8 text-center">
            <Upload className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">
              Upload Financial Documents
            </h3>
            <p className="text-muted-foreground mb-4">
              Upload financial statements, contracts, or other documents for AI
              analysis
            </p>
            <input
              type="file"
              multiple
              accept=".pdf,.doc,.docx,.xlsx,.xls"
              onChange={handleFileUpload}
              className="hidden"
              id="document-upload"
            />
            <label htmlFor="document-upload" className="cursor-pointer">
              <Button type="button" variant="default">
                <Upload className="mr-2 h-4 w-4" />
                Select Documents
              </Button>
            </label>
          </div>

          {isAnalyzing && (
            <div className="mt-6 space-y-3">
              <div className="flex items-center gap-2">
                <Brain className="h-4 w-4 text-primary animate-pulse" />
                <span className="text-sm text-muted-foreground">
                  Analyzing documents...
                </span>
              </div>
              <Progress value={progress} className="h-2" />
              <p className="text-sm text-muted-foreground text-center">
                {progress.toFixed(0)}% complete
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Analysis Results */}
      {analysisResults.length > 0 && (
        <div className="space-y-4">
          <h3 className="text-lg font-semibold">Analysis Results</h3>

          {analysisResults.map((result, index) => (
            <Card key={index} className="overflow-hidden">
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <FileText className="h-4 w-4 text-muted-foreground" />
                    <span className="font-medium">{result.fileName}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    {getSentimentIcon(result.sentiment)}
                    <Badge
                      variant="outline"
                      className={getRiskColor(result.riskScore)}
                    >
                      Risk: {result.riskScore}%
                    </Badge>
                  </div>
                </div>
              </CardHeader>

              <CardContent className="space-y-4">
                {result.financialMetrics && (
                  <div className="grid grid-cols-3 gap-4 p-4 bg-muted/30 rounded-lg">
                    <div className="text-center">
                      <p className="text-sm text-muted-foreground">Revenue</p>
                      <p className="text-lg font-bold">
                        $
                        {(
                          result.financialMetrics.revenue / 1000000
                        ).toFixed(1)}
                        M
                      </p>
                    </div>
                    <div className="text-center">
                      <p className="text-sm text-muted-foreground">Growth</p>
                      <p className="text-lg font-bold text-success">
                        +{result.financialMetrics.growth}%
                      </p>
                    </div>
                    <div className="text-center">
                      <p className="text-sm text-muted-foreground">
                        Profit Margin
                      </p>
                      <p className="text-lg font-bold">
                        {result.financialMetrics.profitability}%
                      </p>
                    </div>
                  </div>
                )}

                {/* Key Findings */}
                <div>
                  <h4 className="font-semibold mb-2 flex items-center gap-2">
                    <CheckCircle className="h-4 w-4 text-success" />
                    Key Findings
                  </h4>
                  <ul className="space-y-1">
                    {result.keyFindings.map((finding, i) => (
                      <li
                        key={i}
                        className="text-sm text-muted-foreground flex items-start gap-2"
                      >
                        <div className="w-1.5 h-1.5 bg-primary rounded-full mt-2 shrink-0" />
                        {finding}
                      </li>
                    ))}
                  </ul>
                </div>

                {/* Recommendations */}
                <div>
                  <h4 className="font-semibold mb-2 flex items-center gap-2">
                    <AlertTriangle className="h-4 w-4 text-warning" />
                    Recommendations
                  </h4>
                  <ul className="space-y-1">
                    {result.recommendations.map((rec, i) => (
                      <li
                        key={i}
                        className="text-sm text-muted-foreground flex items-start gap-2"
                      >
                        <div className="w-1.5 h-1.5 bg-warning rounded-full mt-2 shrink-0" />
                        {rec}
                      </li>
                    ))}
                  </ul>
                </div>

                {/* Actions */}
                <div className="flex gap-2 pt-2">
                  <Button variant="outline" size="sm">
                    <Eye className="mr-2 h-4 w-4" />
                    View Details
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleExportReport(result)}
                  >
                    <Download className="mr-2 h-4 w-4" />
                    Export Report
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};
